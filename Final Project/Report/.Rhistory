library(caret)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggfortify)
autoplot(prcomp(wine), data = wine, colour = 'Type', label = TRUE, label.size = 3)
autoplot(prcomp(wine), data = wine, colour = 'Type')
wine$Type = as.numeric(wine$Type)
model.pca = prcomp(wine, scale = T)
autoplot(model.pca, data = wine, colour = 'Type')
?autoplot
wine$Type = as.numeric(wine$Type)
model.pca = prcomp(wine, scale = T)
autoplot(model.pca, data = wine, colour = 'Type', lable=T)
wine$Type = as.numeric(wine$Type)
model.pca = prcomp(wine, scale = T)
autoplot(model.pca, data = wine, colour = 'Type', label=T)
wine$Type = as.numeric(wine$Type)
model.pca = prcomp(wine, scale = T)
autoplot(model.pca, data = wine, colour = 'Type', loadings = TRUE, loadings.label = TRUE)
summary(model.pca)
model.pca
model.pca$x
model.pca$center
?prcomp
model.pca$rotation
model.pca
model.lda
knitr::opts_chunk$set(echo = FALSE)
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
kable(cover_types)
??kable
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
knitr::kable(cover_types, caption = "Cover Types")
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
ct.df <- data.frame(cover_types)
colnames(ct.df) <- c("Cover Types")
knitr::kable(cct.df, caption = "Cover Types")
knitr::kable(ct.df, caption = "Cover Types")
stargazer::stargazer(ct.df, type = "html", title = "Table with stargazer")
??stargazer
install.packages("stargazer")
library(stargazer)
stargazer::stargazer(ct.df, type = "html", title = "Table with stargazer")
stargazer::stargazer(ct.df, title = "Table with stargazer")
print(stargazer::stargazer(ct.df, title = "Table with stargazer"))
print(xtable::xtable(ct.df, caption = "Table with xtable"),
type = "html", html.table.attributes = "border=0"))
print(xtable::xtable(ct.df, caption = "Table with xtable"),
type = "html", html.table.attributes = "border=0")
knitr::kable(cover_types, caption = "Cover Types")
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
ct.df <- data.frame(cover_types)
colnames(ct.df) <- "Cover Types"
knitr::kable(cover_types, caption = "Cover Types")
knitr::kable(ct.df, caption = "Cover Types")
knitr::kable(ct.df, caption = "Cover Types", border=1)
?kable
knitr::kable(ct.df, caption = "Cover Types", format="latex")
knitr::kable(ct.df, caption = "Cover Types", format="latex")
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
instances <- c(211840, 283301, 35754, 2747, 9493, 17367, 20510)
ct.df <- data.frame(cover_types, instances)
colnames(ct.df) <- c("Cover Type", "Number of Observations")
knitr::kable(ct.df, caption = "Cover Types", format="pandoc")
ct.df
??iris
iris <- data(iris)
head(iris)
iris <- data("iris")
head(iris)
iris <- data("iris3")
head(iris)
head(iris3)
data(iris3)
head(iris3)
head(iris3)
library(datasets)
head(iris3)
library(datasets)
data(iris)
head(iris)
summary(iris$Species)
library(nnet)
out <- class.ind(iris$Species)
head(out)
fit1 <- nnet(Species ~ ., data = iris, size = 3, decay = .1)
dim(iris)
intrain<-createDataPartition(y=iris,p=0.7,list=FALSE)
?createDataPartition
??createDataPartition
library(caret)
intrain<-createDataPartition(y=iris,p=0.7,list=FALSE)
iris.train<-iris[intrain,]
iris.test<-iris[-intrain,]
dim(iris)
intrain<-createDataPartition(y=iris$Species, p=0.7,list=FALSE)
iris.train<-iris[intrain,]
iris.test<-iris[-intrain,]
fit1 <- nnet(Species ~ ., data = iris.train, size = 3, decay = .1)
pred1 <- predict(fit1, newdata = iris.test)
head(pred1)
pred1 <- predict(fit1, newdata = iris.test, type=class)
pred1 <- predict(fit1, newdata = iris.test, type="class")
head(pred1)
correlationMatrix(pred1)
confusionMatrix(pred1)
confusionMatrix(pred1, iris.test$Species)
?confusionMatrix
fit2 <- train(Species ~ ., data = iris.train, method = 'avNNet')
summary(fit2)
fit2
predict(fit2, newdata = iris.test, type="class")
predict(fit2, newdata = iris.test)
trellis.par.set(caretTheme())
plot(fit2)
plot(fit2, metric = "Kappa")
pred2 <- predict(fit2, newdata = iris.test)
confusionMatrix(pred1, iris.test$Species)
confusionMatrix(pred2, iris.test$Species)
set.seed(456)
fit3 <- train(Species ~ ., data = iris.train, method = 'pcaNNet')
pred3 <- predict(fit3, newdata = iris.test)
confusionMatrix(pred3, iris.test$Species)
fit3 <- train(Species ~ ., data = iris.train, method = 'pcaNNet', metric='kappa')
pred3 <- predict(fit3, newdata = iris.test)
confusionMatrix(pred3, iris.test$Species)
set.seed(456)
fit4 <- train(Species ~ ., data = iris.train, method = 'rf', metric='kappa')
pred4 <- predict(fit4, newdata = iris.test)
confusionMatrix(pred4, iris.test$Species)
fit4
fit4
confusionMatrix(pred4, iris.test$Species)
pred3
fit1 <- train(Species ~ ., data = iris.train, method = 'nnet')
fit1
confusionMatrix(pred1, iris.test$Species)
set.seed(456)
fit5 <- train(Species ~ ., data = iris.train, method = 'knn', preProc = c("center", "scale"), metric = 'kappa' )
pred5 <- predict(fit5, newdata = iris.test)
confusionMatrix(pred5, iris.test$Species)
set.seed(456)
fit3 <- train(Species ~ ., data = iris.train, method = 'pcaNNet', metric='Kappa')
pred3 <- predict(fit3, newdata = iris.test)
confusionMatrix(pred3, iris.test$Species)
set.seed(456)
fit6 <- train(Species ~ ., data = iris.train, method = 'lda',
preProc = c("center", "scale"), metric='Kappa')
pred6 <- predict(fit6, newdata = iris.test)
confusionMatrix(pred6, iris.test$Species)
confusionMatrix(pred5, iris.test$Species)
pred5
pred6
xyplot(fit6)
ggplot(fit6)
plot(fit6)
fit6 <- train(Species ~ ., data = iris.train, method = 'lda',
preProc = c("center", "scale"), trControl = ctrl)
colnames(iris.train)
fit6 <- train(x = iris.train[,1:4], y = iris.train$Species, data = iris.train, method = 'lda',
preProc = c("center", "scale"), trControl = ctrl)
fit6 <- train(x = iris.train[,1:4], y = iris.train$Species, data = iris.train, method = 'lda',
preProc = c("center", "scale"))
pred6 <- predict(fit6, newdata = iris.test)
fit6 <- train(x = iris.train, y = iris.train$Species, data = iris.train, method = 'lda',
preProc = c("center", "scale"))
pred6 <- predict(fit6, newdata = iris.test)
cm <- confusionMatrix(pred5, iris.test$Species)
cm$byClass
?multiClassSummary
cm
cm$overall
cm$byClass
??preprocess
setwd("~/Documents/MSPA/MSPA 454/mspa454/Final Project/Report")
knitr::opts_chunk$set(echo = FALSE)
library(randomForest)
set.seed(456)
explore.rf <- randomForest(CoverType~.,data = forest.orig, ntree = 10, nodesize = 10, importance = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# read in the data, create dataframe
gz = gzfile('data/covtype.data.gz','rt')
forest.orig = read.csv(gz,header=F)
forest.orig.colnames = t(read.csv('data/covtyp.colnames.csv',header=F))
colnames(forest.orig) = forest.orig.colnames
# identify continuous variables
forest.var.continuous = c('Elevation','Aspect','Slope', 'HDist.Hydrology', 'VDist.Hydrology',
'HDist.Roadway', 'Hillshade.9am', 'Hillshade.12pm', 'Hillshade.3pm',
'HDist.FirePoint')
# for speed, will perform eda on subset until ready to do a full run
set.seed(33)
forest = forest.orig[sample(nrow(forest.orig),20000),]
forest.var.discrete.indices = grep("^Area|^SoilType|CoverType", colnames(forest))
forest[,forest.var.discrete.indices] = as.factor(unlist(forest[,forest.var.discrete.indices]))
forest.numeric = as.data.frame(sapply(forest,as.numeric))
covertype.names = c('Spruce-fir','Lodgepole Pine','Ponderosa Pine','Cottonwood-Willow','Aspen','Douglas-fir','Krummholz')
forest$CoverType[forest$CoverType==1] = 'Spruce-fir'
forest$CoverType[forest$CoverType==2] = 'Lodgepole Pine'
forest$CoverType[forest$CoverType==3] = 'Ponderosa Pine'
forest$CoverType[forest$CoverType==4] = 'Cottonwood-Willow'
forest$CoverType[forest$CoverType==5] = 'Aspen'
forest$CoverType[forest$CoverType==6] = 'Douglas-fir'
forest$CoverType[forest$CoverType==7] = 'Krummholz'
# add Area column
# are any in multiple areas? NO. all belong to only one area
idx = grep("Area", colnames(forest))
temp = forest.numeric[,idx]
temp.rows = temp[apply(temp,1,sum) > 1,]
temp$Z.Area = apply(temp,1,function(x) {
return(which.max(x))
})
forest.numeric$Z.Area = temp$Z.Area
forest.scaled = as.data.frame(scale(forest.numeric))
library(lattice)
library(ggplot2)
library(corrplot)
library(MASS)
library(caret)
library(car)
cover_types <- c("Spruce/Fir", "Lodgepole Pine", "Ponderosa Pine", "Cottonwood/Willow", "Aspen",
"Douglas/Fir", "Krummholz")
instances <- c(211840, 283301, 35754, 2747, 9493, 17367, 20510)
ct.df <- data.frame(cover_types, instances)
colnames(ct.df) <- c("Cover Type", "Number of Observations")
knitr::kable(ct.df, caption = "Cover Type Classes", format="pandoc")
features <- c("Elevation", "Aspect", "Slope", "HDist.Hydrology", "VDist.Hydrology",
"HDist.Roadway", "Hillshade.9am", "Hillshade.12pm", "Hillshade.3pm",
"HHDist.FirePoint", "Area", "SoilType")
descriptions <- c("Elevation in meters", "Aspect in degrees aziumuth", "Slope in degrees",
"Horizontal distance to nearest surface water feature in meters",
"Vertical distance to nearest surface water feature in meters",
"Horizontal distance to nearest roadway in meters", "Hillshade index at 9am, summer solstice",
"Hillshade index at noon, summer soltice", "Hillshade index at 3pm, summer solstice",
"Horizontal Distance to nearest wildfire ignition points", "Wilderness area designation - 4 binary areas",
"Soil Type designation - 40 binary values")
features.df <- data.frame(features, descriptions)
colnames(features.df) <- c("Feature", "Descriptions")
knitr::kable(features.df, caption = "Features", format="pandoc")
library(scales)
ggplot(as.data.frame(table(forest.orig$CoverType)), aes(x=Var1, y = Freq)) + ggtitle("Forest Cover
Frequency by Class") + geom_bar(stat = "identity", fill="#1f78b4", width=.5,
color="black") + xlab("Cover Type") + scale_y_continuous(name="Frequency", labels = comma)
options(digits=3)
my.summary <- function(x,...){
c(mean=round(mean(x, ...), digits = 4),
sd=round(sd(x, ...), digits=4),
median=median(x, ...),
min=min(x, ...),
max=max(x,...),
nmiss=sum(is.na(x,...)),
type="Continuous")
}
forest.stats= apply(forest.orig[,1:10], 2, my.summary)
library(knitr)
kable(t(forest.stats), caption= "Summary Statistics for Continuous Data", format="pandoc")
## area
forest.area= forest.orig[11:14]
summary.area <- data.frame(
Name = character(),
Count = numeric(),
stringsAsFactors = F)
for (i in 1:4){
summary.area[i,1] <- names(forest.area[i])
summary.area[i,2] <- sum(forest.area[,i])
}
area<-summary.area[with(summary.area,order(-Count)),]
kable(area,caption= "Area Type Counts", format="pandoc", row.names = F)
## soil
forest.soil= forest.orig[15:54]
summary.soil <- data.frame(
Name = character(),
Count = numeric(),
stringsAsFactors = F)
for (i in 1:40){
summary.soil[i,1] <- names(forest.soil[i])
summary.soil[i,2] <- sum(forest.soil[,i])
}
soil<-summary.soil[with(summary.soil,order(-Count)),]
kable(soil, caption= "Soil Type Counts", format="pandoc", row.names = F)
st = stack(as.data.frame(forest.scaled[,forest.var.continuous]))
ggplot(as.data.frame(st)) +
geom_boxplot(aes(x = ind, y = values)) +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
scale_x_discrete(name ="") + scale_y_continuous(name ="") +
ggtitle("Boxplots of Scaled Continuous Variables")
density.plots = densityplot(~ Elevation + Aspect + Slope + HDist.Hydrology + VDist.Hydrology +
HDist.Roadway + Hillshade.9am + Hillshade.12pm + Hillshade.3pm +
HDist.FirePoint,
data=forest,
groups = CoverType,
plot.points = FALSE,
auto.key = list(space="right",title="Cover Type",cex=.6),
scales= list(x="free",y="free"),
xlab = '',
ylab=list(cex=.8),
aspect="fill",
par.strip.text=list(cex=.9))
plot(density.plots)
density.plots = densityplot(~ Elevation + Aspect + Slope + HDist.Hydrology + VDist.Hydrology +
HDist.Roadway + Hillshade.9am + Hillshade.12pm + Hillshade.3pm +
HDist.FirePoint,
data=forest.numeric,
groups = Z.Area,
plot.points = FALSE,
auto.key = list(space="right",title="Area",cex=.6),
scales= list(x="free",y="free"),
xlab = '',
ylab=list(cex=.8),
aspect="fill",
par.strip.text=list(cex=.9))
plot(density.plots)
corrplot(cor(forest[, forest.var.continuous]),
tl.col = "black", tl.cex = 0.8, tl.srt = 45,
cl.cex = 0.8, pch.cex = 0.8, diag = FALSE,
type="lower",
addCoefasPercent = TRUE, addCoef.col = TRUE,number.cex = .6) #Matt added to show correlation amounts
idx = grep("SoilType|CoverType", colnames(forest.numeric))
df = as.data.frame(forest.numeric[,idx])
idx.type = grep("CoverType", colnames(df))
df.temp = df[,-idx.type]
soil.sums = apply(df.temp,2,function(x) {
tbl = table(x,df$CoverType)
if (dim(tbl)[1] < 2) {
tbl = rbind('0' = tbl, '1' = rep(0,7), deparse.level = 1)
}
return (apply(tbl,1,sum)[2])
})
#soil.sums
soil.sums.byclass = apply(df[,-idx.type],2,function(x) {
tbl = table(x,df$CoverType)
tbl = tbl[seq(2,14,by=2)]
return (tbl)
})
#soil.sums.byclass
soil.ratios = as.data.frame(t(soil.sums.byclass)/soil.sums)
library(RColorBrewer)
soil.ratios.m = na.omit(as.matrix(soil.ratios))
barchart(soil.ratios.m,col=brewer.pal(7, "Pastel2"),xlab='',
key=list(space="right",
lines=list(col=brewer.pal(7, "Pastel2"),lwd=3),
text=list(covertype.names)
))
idx = grep("Area1|Area2|Area3|Area4|CoverType", colnames(forest.numeric))
df = as.data.frame(forest.numeric[,idx])
idx.type = grep("CoverType", colnames(df))
df.temp = df[,-idx.type]
area.sums = apply(df.temp,2,function(x) {
tbl = table(x,df$CoverType)
if (dim(tbl)[1] < 2) {
tbl = rbind('0' = tbl, '1' = rep(0,7), deparse.level = 1)
}
return (apply(tbl,1,sum)[2])
})
#area.sums
area.sums.byclass = apply(df[,-idx.type],2,function(x) {
tbl = table(x,df$CoverType)
tbl = tbl[seq(2,14,by=2)]
return (tbl)
})
#area.sums.byclass
area.ratios = as.data.frame(t(area.sums.byclass)/area.sums)
library(RColorBrewer)
area.ratios.m = na.omit(as.matrix(area.ratios))
barchart(area.ratios.m,col=brewer.pal(7, "Pastel2"),xlab='',
key=list(space="right",
lines=list(col=brewer.pal(7, "Pastel2"),lwd=3),
text=list(covertype.names)
)
)
ggplot(forest, aes(x=HDist.Roadway)) +
geom_histogram(aes(group=CoverType, colour=CoverType, fill=CoverType), bins=30, alpha=0.7)+
ggtitle('')+
theme(legend.title = element_blank())+
labs(x="Distance to Roadway",y="Count")
ggplot(forest, aes(x=HDist.Hydrology)) +
geom_histogram(aes(group=CoverType, colour=CoverType, fill=CoverType), bins=30, alpha=0.7)+
ggtitle('')+
theme(legend.title = element_blank())+
labs(x="Distance to Water",y="Count")
ggplot(forest, aes(x=Aspect)) +
geom_point(aes(y=Hillshade.9am, color="Hillshade.9am"), alpha=.1) +
geom_point(aes(y=Hillshade.3pm, color="Hillshade.3pm"), alpha=.1)
# transform Hillshade.12pm and Vdist.Hydrology
forest.new= forest.orig
forest.new$trans.Hillshade.12pm = log(forest.new$Hillshade.12pm)
#forest.new$trans.VDist.Hydrology = preProcess(forest.new$VDist.Hydrology, method = "YeoJohnson")
forest.new$trans.LDist.Hydrology <- sqrt(forest.new$VDist.Hydrology^2 + forest.new$HDist.Hydrology^2)
# Soil Type to Climate Zone Mapping
forest.new$trans.zone27 <- rowSums(forest.new[,c("SoilType1", "SoilType2","SoilType3","SoilType4", "SoilType5","SoilType6")])
forest.new$trans.zone35 <- rowSums(forest.new[,c("SoilType7", "SoilType8")])
forest.new$trans.zone42 <- forest.new$SoilType9
forest.new$trans.zone47 <- rowSums(forest.new[,c("SoilType10", "SoilType11","SoilType12","SoilType13")])
forest.new$trans.zone51 <- rowSums(forest.new[,c("SoilType14", "SoilType15")])
forest.new$trans.zone61 <- rowSums(forest.new[,c("SoilType16", "SoilType17")])
forest.new$trans.zone67 <- forest.new$SoilType18
forest.new$trans.zone71 <- rowSums(forest.new[,c("SoilType19", "SoilType20","SoilType21")])
forest.new$trans.zone72 <- rowSums(forest.new[,c("SoilType22", "SoilType23")])
forest.new$trans.zone77 <- rowSums(forest.new[,c("SoilType24", "SoilType25","SoilType26","SoilType27", "SoilType28",
"SoilType29", "SoilType30","SoilType31","SoilType32", "SoilType33", "SoilType34")])
forest.new$trans.zone87 <- rowSums(forest.new[,c("SoilType35", "SoilType36","SoilType37","SoilType38", "SoilType39","SoilType40")])
#PCA
# Matt R: Not sure iff PCA is going to make sense or provide value for SoilType categorization.
# Would need to choose SoilType, Climate Zone, or PCA...but not all of them
idxs = grep("Soil", colnames(forest.numeric))
temp = forest.new[,idxs]
soil.pca = prcomp(temp, scale = F)
forest.new <- cbind(forest.new, soil.pca$x[,1:16]) #90.7% of important
#plot(summary(soil.pca)$importance[3,])
#summary(soil.pca)$importance[3,]
#summary(soil.pca)
idxs = grep("Aspect|Hillshade|Slope", colnames(forest.numeric))
temp = forest.new[,idxs]
shadeslope.pca = prcomp(temp, scale = F)
shadeslope.pca.x = shadeslope.pca$x
colnames(shadeslope.pca.x) = c('shade.pca.pc1','shade.pca.pc2','shade.pca.pc3','shade.pca.pc4','shade.pca.pc5')
forest.new <- cbind(forest.new, shadeslope.pca.x[,1:3]) #99.7% of important
#plot(summary(shadeslope.pca)$importance[3,])
#summary(shadeslope.pca)$importance[3,]
#summary(shadeslope.pca)
idxs = grep("pca|PC", colnames(forest.new))
corrplot(cor(forest.new[,idxs]),
tl.col = "black", tl.cex = 0.8, tl.srt = 45,
cl.cex = 0.8, pch.cex = 0.8, diag = FALSE,
type="lower",
addCoefasPercent = TRUE, addCoef.col = TRUE,number.cex = .6) #Matt added to show correlation amounts
idxs.nzv = nzv(forest.new)
#colnames(forest.new)[idxs.nzv]
idxs_trans = grep("trans", colnames(forest.new))
forest.transforms= forest.new[,idxs_trans]
idxs_pca = grep("PC|shade.pca", colnames(forest.new))
forest.pca= forest.new[,idxs_pca]
idxs_buck = grep("buck", colnames(forest.new))
forest.bucketing= forest[,idxs_buck]
#Training/Test Splitting
set.seed(330)
fraction.train <- .7 # Enter Training Set Size
fraction.valid <- 1 - fraction.train
size.train <- fraction.train*nrow(forest.new)
size.valid <- nrow(forest.new) - size.train
indices.train <- sort(sample(seq_len(nrow(forest.new)), size=size.train))
indices.valid <- setdiff(seq_len(nrow(forest.new)), indices.train)
forest.train <- forest.new[indices.train,]
forest.valid <- forest.new[indices.valid,]
library(randomForest)
set.seed(456)
explore.rf <- randomForest(CoverType~.,data = forest.orig, ntree = 10, nodesize = 10, importance = TRUE)
varImpPlot(explore.rf, type = 2, main = 'Variable Importance')
forest.transforms.colnames = colnames(forest.train)
forest.modeling.colnames = forest.transforms.colnames
idxs = grep("^Elevation|^Aspect|^Slope|^HDist|^VDist|^Hillshade|^Area|^SoilType",forest.modeling.colnames)
forest.modeling.colnames[idxs] = paste("orig.",forest.transforms.colnames[idxs],sep = "")
idxs = grep("^PC",forest.modeling.colnames)
forest.modeling.colnames[idxs] = paste("pca.soil.",forest.transforms.colnames[idxs],sep = "")
colnames(forest.train) = forest.modeling.colnames
colnames(forest.valid) = forest.modeling.colnames
forest.modeling.colidxs = grep("^orig.Elevation|^orig.Aspect|^orig.Slope|^orig|^VDist|^Hillshade|^Area|^SoilType",forest.modeling.colnames)
dim(forest.train)
colnames(forest.train)
colnames(forest.train[,-53])
colnames(forest.train[,-55])
??cv.glmnet
rpart.plot(rpart(forest.train[,-55], forest.train$CoverType), main = "Tree Plot for Forest Cover", cex = 0.8)
library(rpart)
library(rpart.plot)
rpart.plot(rpart(forest.train[,-55], forest.train$CoverType), main = "Tree Plot for Forest Cover", cex = 0.8)
library(rpart)
library(rpart.plot)
rpart.plot(rpart(CoverType ~ ., data = forest.train), main = "Tree Plot for Forest Cover", cex = 0.8)
library(glmnet)
log.cv <- cv.glmnet(forest.train[,-55], forest.train$CoverType, family = "multinomial", nfolds = 10, type.measure = 'auc')
library(glmnet)
log.cv <- cv.glmnet(x = forest.train[,-55], y = forest.train$CoverType, family = "multinomial", nfolds = 10, type.measure = 'auc')
library(glmnet)
log.cv <- cv.glmnet(x = forest.train[,-55], y = factor(forest.train$CoverType), family = "multinomial", nfolds = 10, type.measure = 'auc')
library(randomForest)
set.seed(456)
explore.rf <- randomForest(forest.train[,-55], forest.train$CoverType, data = forest.train, ntree = 10, nodesize = 10, importance = TRUE)
forest.train$CoverType
library(randomForest)
set.seed(456)
explore.rf <- randomForest(forest.train[,-55], factor(forest.train$CoverType), data = forest.train, ntree = 10, nodesize = 10, importance = TRUE)
library(randomForest)
set.seed(456)
explore.rf <- randomForest(x=forest.train[,-55], y=factor(forest.train$CoverType), data = forest.train, ntree = 10, nodesize = 10, importance = TRUE)
forest.train[,-55]
library(glmnet)
x <- as.matrix(forest.train[,-55])
y <- forest.train$CoverType
log.cv <- cv.glmnet(x, y, family = "multinomial", nfolds = 10, type.measure = 'auc')
head(x)
library(glmnet)
x <- as.matrix(forest.train[,-55])
y <- as.factor(forest.train$CoverType)
log.cv <- cv.glmnet(x, y, family = "multinomial", nfolds = 10, type.measure = 'auc')
library(glmnet)
x <- as.matrix(forest.train[,-55])
y <- as.factor(forest.train$CoverType)
log.cv <- cv.glmnet(x, y, family = "multinomial", nfolds = 10)
is.na(forest.train)
sum(is.na(forest.train))
library(rpart)
library(rpart.plot)
rpart.plot(rpart(forest.train$CoverType ~ ., data = forest.train), main = "Tree Plot for Wine Type")
library(rpart)
library(rpart.plot)
rpart.plot(rpart(forest.train$CoverType ~ ., data = forest.train), main = "Tree Plot for Cover Type")
