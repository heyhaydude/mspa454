nn.mod2$finalModel$model$n
nn.mod2$finalModel$model$nunits
nn.mod2$finalModel$model$nconn
nn.mod2$finalModel$model$conn
nn.mod2$finalModel$model$nsunits
nn.mod2$finalModel$model$decay
nn.mod2$finalModel$model$fitted.values
names(nn.mod2$finalModel$model)
names(nn.mod2$finalModel$call
)
plotnet(nn.mod2$finalModel$model,cex_val = 0.7, legend = FALSE)
?plotnet
model.pca
ggplot(nn.mod1)
ggplot(nn.mod1) + themse(legend.position = "top")
ggplot(nn.mod1)
plot(nn.mod1)
ggplot(nn.mod2)
plotnet(nn.mod2$finalModel$model,cex_val = 0.7, legend = FALSE)
ggplot(varImp(svm.mod1))
plot(varImp(svm.mod1))
ggplot(varImp(svm.mod1))
ggplot(svm.mod1)
ggplot(rf.mod1$finalModel)
plot(rf.mod1$finalModel)
ggplot(rf.mod1)
ggplot(varImpPlot(rf.mod1$finalModel))
plot(varImpPlot(rf.mod1$finalModel))
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel$model,cex_val = 0.7, legend = FALSE)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel$model)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel$model, alpha = 0.6
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel$model, alpha = 0.6)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel$model, alpha.val = 0.6)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2, alpha.val = 0.6)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nn.mod2$finalModel, alpha.val = 0.6)
plotnet(nn.mod2$finalModel$model,cex_val = 0.7, legend = FALSE)
plotnet(nn.mod2$finalModel$model,cex_val = 0.7,
x.lab = c("input 1","input 2","input 3","input 4","input 5","input 6","input 7","input 8",
"input 9","input 10","input 11","input 12"))
plotnet(nn.mod2$finalModel$model,cex_val = 0.7,
x.lab = c("input 1","input 2","input 3","input 4","input 5","input 6","input 7","input 8",
"input 9","input 10","input 11","input 12"))
plotnet(nn.mod2$finalModel$model,cex_val = 0.7, var.labs = FALSE)
plotnet(nn.mod2$finalModel$model,cex_val = 0.7, var.labs = FALSE)
colnames(wine)
class(wine)
wine.type <- class(wine[,1:14])
wine.type
rownames(wine)
head(wine)
wine.type <- class(head(wine))
wine.type
lapply(wine, class)
wine.type <- lapply(wine, class)
wine.type
wine.type$Type
wine.name <- colnames(wine)
wine.type <- lapply(wine, class)
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(spam.dict) = 1:nrow(wine.dict)
wine.name <- colnames(wine)
wine.type <- lapply(wine, class)
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(wine.dict) = 1:nrow(wine.dict)
kable(wine.dict, caption = "Wine Data Dictionary", format="pandoc")
library(RGtk2)
library(rattle)
library(lattice)
library(hexbin)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggfortify)
library(pander)
library(knitr)
wine.name <- colnames(wine)
wine.type <- lapply(wine, class)
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(wine.dict) = 1:nrow(wine.dict)
kable(wine.dict, caption = "Wine Data Dictionary", format="pandoc")
lapply(wine, class)
(lapply(wine, class))[1]
(lapply(wine, class))[1][1]
wine.name <- colnames(wine)
wine.type <- c("factor", "numeric","numeric","numeric","numeric","integer",
"numeric","numeric","numeric","numeric","numeric","numeric","numeric",
"integer")
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(wine.dict) = 1:nrow(wine.dict)
kable(wine.dict, caption = "Wine Data Dictionary", format="pandoc")
wine.name <- colnames(wine)
wine.type <- c("factor", "numeric","numeric","numeric","numeric","integer",
"numeric","numeric","numeric","numeric","numeric","numeric","numeric",
"integer")
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(wine.dict) = 1:nrow(wine.dict)
kable(wine.dict, caption = "Wine Data Dictionary", format="pandoc")
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "False Positive Rate", "Sensitivity", "Error Rate")
sensitivity = round(c(cm_rf$byClass[1], cm_svm$byClass[1],
cm_nn1$byClass[1],cm_nn2$byClass[1]),
digits = 3)
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "False Positive Rate", "Sensitivity", "Error Rate")
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
fp_rates = round(c(1 - cm.rf1$byClass[2], 1 - cm.svm1$byClass[2],
1 -cm.nn1$byClass[2],1 - cm.nn2$byClass[2]),
digits = 3)
error_rates = round(c(1 - cm.rf1$overall["Accuracy"],
1 - cm.svm1$overall["Accuracy"],1 - cm.nn1$overall["Accuracy"],1 - cm.nn2$overall["Accuracy"]),
digits = 3)
summary_table = cbind(models,fp_rates,sensitivity,
error_rates)
colnames(summary_table) = stats
rownames(summary_table) = NULL
pander(summary_table, justify = "left")
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Sensitivity", "Error Rate")
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
fp_rates = round(c(1 - cm.rf1$byClass[2], 1 - cm.svm1$byClass[2],
1 -cm.nn1$byClass[2],1 - cm.nn2$byClass[2]),
digits = 3)
accuracy = round(c(cm.rf1$overall["Accuracy"],
cm.svm1$overall["Accuracy"],cm.nn1$overall["Accuracy"],cm.nn2$overall["Accuracy"]),
digits = 3)
summary_table = cbind(models,fp_rates,sensitivity,
accuracy)
colnames(summary_table) = stats
rownames(summary_table) = NULL
pander(summary_table, justify = "left")
pander(cm.nn2$table)
knitr(cm.nn2$table, format = "pander")
kable(cm.nn2$table, format = "pander")
kable(cm.nn2$table, format = pander)
ggplot(varImpPlot(rf.mod1$finalModel)[1])
ggplot(varImpPlot(rf.mod1$finalModel))
ggplot(varImpPlot(rf.mod1$finalModel[1]))
ggplot(varImpPlot(rf.mod1$finalModel))
ggplot(varImpPlot(rf.mod1$finalModel))[1]
ggplot(varImpPlot(rf.mod1$finalModel))[1,]
ggplot(varImpPlot(rf.mod1$finalModel))[,1]
ggplot(varImpPlot(rf.mod1$finalModel))[2]
varImpPlot(rf.mod1$finalModel)
varImpPlot(rf.mod1$finalModel, main = "Random Forest Model 1 Importance Plot")
varImpPlot(rf.mod1$finalModel, main = "Random Forest Model 1 Importance Plot")
rf.mod1
library(NeuralNetTools)
plotnet(nn.mod1, cex_val = 0.7)
library(NeuralNetTools)
plotnet(nn.mod1, cex_val = 0.7)
library(RSNNS)
install.packages("RSNNS")
library(RSNNS)
garson(nn.mod1)
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Sensitivity", "Error Rate")
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
fp_rates = round(c(1 - cm.rf1$byClass[2], 1 - cm.svm1$byClass[2],
1 -cm.nn1$byClass[2],1 - cm.nn2$byClass[2]),
digits = 3)
accuracy = round(c(cm.rf1$overall["Accuracy"],
cm.svm1$overall["Accuracy"],cm.nn1$overall["Accuracy"],cm.nn2$overall["Accuracy"]),
digits = 3)
summary_table = cbind(models,accuracy, sensitivity, fp_rates)
colnames(summary_table) = stats
rownames(summary_table) = NULL
pander(summary_table, justify = "left")
svm.mod1
cm.svm1
library(NeuralNetTools)
plotnet(nn.mod1, cex_val = 0.7)
cm.nn1
nn.mod1
garson(nn.mod2)
library(RSNNS)
garson(nn.mod1) + theme(axis.text.x = element_text(angle=45, hjust = 1))
nn.mod2
nn.mod1
svm.mod1
cm.rf1$byClass
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, fp)
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, precision)
colnames(summary_table) = stats
rownames(summary_table) = NULL
pander(summary_table, justify = "left")
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, precision)
colnames(summary_table) = stats
rownames(summary_table) = NULL
kable(summary_table, justify = "left", format = "pander")
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, precision)
colnames(summary_table) = stats
rownames(summary_table) = NULL
kable(summary_table, justify = "left", format = pander)
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, precision)
colnames(summary_table) = stats
rownames(summary_table) = NULL
kable(summary_table, justify = "left", format = pandoc)
models = c("Random Forest","Support Vector Machines","Neural Networks", "Neural Networks with PCA")
stats = c("Model", "Accuracy", "Kappa", "Sensitivity", "Precision")
accuracy = round(c(cm.rf1$overall[1], cm.svm1$overall[1],cm.nn1$overall[1],cm.nn2$overall[1]),
digits = 3)
kappa = round(c(cm.rf1$overall[2],cm.svm1$overall[2],cm.nn1$overall[2],cm.nn2$overall[2]),
digits = 3)
sensitivity = round(c(cm.rf1$byClass[1], cm.svm1$byClass[1],
cm.nn1$byClass[1],cm.nn2$byClass[1]),
digits = 3)
precision = round(c(cm.rf1$byClass[5], cm.svm1$byClass[5], cm.nn1$byClass[2], cm.nn2$byClass[2]),
digits = 3)
summary_table = cbind(models,accuracy,kappa, sensitivity, precision)
colnames(summary_table) = stats
rownames(summary_table) = NULL
kable(summary_table, caption = "Model Comparison Chart", format = "pandoc")
set.seed(825)
svm.mo21 <- train(Type ~ ., data = wine,
method = "svmLinearWeights",
preProcess = c("center", "scale"),
trControl = fitControl)
set.seed(825)
svm.mod2 <- train(Type ~ ., data = wine,
method = "svmRadialWeights",
preProcess = c("center", "scale"),
trControl = fitControl)
set.seed(825)
svm.mo21 <- train(Type ~ ., data = wine,
method = "svmRadial",
preProcess = c("center", "scale"),
trControl = fitControl)
set.seed(825)
svm.mod1 <- train(Type ~ ., data = wine,
method = "svmRadial",
preProcess = c("center", "scale"),
trControl = fitControl)
knitr::opts_chunk$set(echo=FALSE)
library(RGtk2)
library(rattle)
library(lattice)
library(hexbin)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggfortify)
library(pander)
library(knitr)
data("wine")
#str(wine)
wine.name <- colnames(wine)
wine.type <- c("factor", "numeric","numeric","numeric","numeric","integer",
"numeric","numeric","numeric","numeric","numeric","numeric","numeric",
"integer")
wine.des <- c("Response Variable: Type of wine, {1,2,3}",
"Alcohol level, indicates ripeness of grapes at harvest",
"Malic Acid, varies according to grape variety and soil content",
"Ash, the inorganic matter that remains after evaporation and incineration",
"Alcalinity of ash", "Magnesium, comes from water source",
"Total Phenols, responsible for much of the flavor and body of wine",
"Flavanoids, type of phenol", "Nonflavanoid phenols", "Proanthocyanins, another type of phenol",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline, amino acid in wine, varies by    variety of wine")
wine.dict = data.frame(wine.name, wine.type, wine.des)
colnames(wine.dict) = c("Name", "Type", "Definition")
rownames(wine.dict) = 1:nrow(wine.dict)
kable(wine.dict, caption = "Wine Data Dictionary", format="pandoc")
ggplot(as.data.frame(table(wine$Type)), aes(x=Var1, y = Freq)) + ggtitle("Wine Frequency by Class")  + geom_bar(stat = "identity", fill="#1f78b4", width=.5, color="black") + xlab("Wine Type")
a <- densityplot(~ Alcohol, data = wine, plot.point = F)
b <- densityplot(~ Malic, data = wine, plot.point = F)
c <- densityplot(~ Ash, data = wine, plot.point = F)
d <- densityplot(~ Alcalinity, data = wine, plot.point = F)
e <- densityplot(~ Magnesium, data = wine, plot.point = F)
f <- densityplot(~ Phenols, data = wine, plot.point = F)
g <- densityplot(~ Flavanoids, data = wine, plot.point = F)
h <- densityplot(~ Nonflavanoids, data = wine, plot.point = F)
i <- densityplot(~ Proanthocyanins, data = wine, plot.point = F)
j <- densityplot(~ Color, data = wine, plot.point = F)
k <- densityplot(~ Hue, data = wine, plot.point = F)
l <- densityplot(~ Dilution, data = wine, plot.point = F)
m <- densityplot(~ Proline, data = wine, plot.point = F)
grid.arrange(a,b,c,d,e,f, ncol=3)
grid.arrange(g,h,i,j,k,l, ncol=3)
grid.arrange(m, ncol=3, nrow=2)
a <- densityplot(~ Alcohol, groups=Type, data = wine, plot.point = F)
b <- densityplot(~ Malic, groups=Type, data = wine, plot.point = F)
c <- densityplot(~ Ash, groups=Type, data = wine, plot.point = F)
d <- densityplot(~ Alcalinity, groups=Type, data = wine, plot.point = F)
e <- densityplot(~ Magnesium, groups=Type,data = wine, plot.point = F)
f <- densityplot(~ Phenols, groups=Type, data = wine, plot.point = F)
g <- densityplot(~ Flavanoids, groups=Type, data = wine, plot.point = F)
h <- densityplot(~ Nonflavanoids, groups=Type, data = wine, plot.point = F)
i <- densityplot(~ Proanthocyanins, groups=Type, data = wine, plot.point = F)
j <- densityplot(~ Color, groups=Type, data = wine, plot.point = F)
k <- densityplot(~ Hue, groups=Type, data = wine, plot.point = F)
l <- densityplot(~ Dilution, groups=Type, data = wine, plot.point = F)
m <- densityplot(~ Proline, groups=Type, data = wine, plot.point = F)
grid.arrange(a,b,c,d,e,f, ncol=3)
grid.arrange(g,h,i,j,k,l, ncol=3)
grid.arrange(m, ncol=3, nrow=2)
totCor <- cor(wine[2:14])
corrplot(totCor, order = "FPC", method = "color",tl.cex = 0.8, tl.col = rgb(0, 0, 0), type="lower")
rpart.plot(rpart(wine$Type ~ ., data = wine), main = "Tree Plot for Wine Type")
model.lda = lda(Type ~ ., data = wine)
#plot(model.lda)
ggplotLDAPrep <- function(x){
if (!is.null(Terms <- x$terms)) {
data <- model.frame(x)
X <- model.matrix(delete.response(Terms), data)
g <- model.response(data)
xint <- match("(Intercept)", colnames(X), nomatch = 0L)
if (xint > 0L)
X <- X[, -xint, drop = FALSE]
}
means <- colMeans(x$means)
X <- scale(X, center = means, scale = FALSE) %*% x$scaling
rtrn <- as.data.frame(cbind(X,labels=as.character(g)))
rtrn <- data.frame(X,labels=as.character(g))
return(rtrn)
}
fitGraph <- ggplotLDAPrep(model.lda)
ggplot(fitGraph, aes(LD1,LD2, color=labels))+geom_point()
#model.lda
wine$Type = as.numeric(wine$Type)
model.pca = prcomp(wine, scale = T)
autoplot(model.pca, data = wine, colour = 'Type', loadings = TRUE, loadings.label = TRUE)
#model.pca
wine$Type = as.factor(wine$Type)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 10)
set.seed(825)
rf.mod1 <- train(Type ~ ., data = wine,
method = "rf", proximity = TRUE,
trControl = fitControl, importance = TRUE)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 10)
set.seed(825)
rf.mod1 <- train(Type ~ ., data = wine,
method = "rf",
trControl = fitControl, importance = TRUE)
cm.rf1
rf.mod1
saveRDS(rf.mod1, "./rf.mod1.rds")
saveRDS(svm.mod1, "./svm.mod1.rds")
saveRDS(nn.mod1, "./nn.mod1.rds")
saveRDS(nn.mod2, "./nn.mod2.rds")
cm.rf1
pred.rf2 = predict(rf.mod1$finalModel, newdata=wine)
cm.rf2 = confusionMatrix(data=pred.rf1, wine$Type)
pred.rf1
?predict
?predict
library(RGtk2)
library(rattle)
library(lattice)
library(hexbin)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(MASS)
library(ggfortify)
library(pander)
library(knitr)
pred.rf2 = predict(rf.mod1$finalModel, newdata=wine, )
cm.rf2 = confusionMatrix(data=pred.rf1, wine$Type)
saveRDS(cm.rf1, "./cm.rf1.rds")
pred.svm1 = predict(svm.mod1, newdata=wine)
cm.svm1 = confusionMatrix(data=pred.svm1, wine$Type)
??varImpPlot
saveRDS(cm.nn2, "./cm.nn2.rds")
kable(cm.rf1$table, caption = "Confusion Table for Random Forest Model 1 - In-Sample", format = "pandoc")
kable(cm.svm1$tablecaption,  "Confusion Table for Support Vector Model", format = "pandoc"))
kable(cm.svm1$tablecaption,  "Confusion Table for Support Vector Model", format = "pandoc")
kable(cm.svm1$table,  "Confusion Table for Support Vector Model", format = "pandoc")
kable(cm.svm1$table,  "Confusion Table for Support Vector Model", format = "pandoc")
pander(cm.svm1$table)
pander(cm.svm1$table)
cm.svm1
saveRDS(cm.svm1, "./cm.svm1.rds")
saveRDS(cm.nn1, "./cm.nn1.rds")
setwd("~/Documents/MSPA/MSPA 454/mspa454/Final Project/Report")
# read in the data, create dataframe
gz = gzfile('data/covtype.data.gz','rt')
